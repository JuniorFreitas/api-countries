#!/bin/bash

echo "üöÄ Deploy no Vercel - API Pa√≠ses, Estados e Cidades"
echo "=================================================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar pr√©-requisitos
echo "üîç Verificando pr√©-requisitos..."

if ! command_exists node; then
    echo -e "${RED}‚ùå Node.js n√£o encontrado. Instale: https://nodejs.org${NC}"
    exit 1
fi

if ! command_exists npm; then
    echo -e "${RED}‚ùå NPM n√£o encontrado. Instale o Node.js${NC}"
    exit 1
fi

if ! command_exists vercel; then
    echo -e "${YELLOW}‚ö†Ô∏è  Vercel CLI n√£o encontrado. Instalando...${NC}"
    npm install -g vercel
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Erro ao instalar Vercel CLI${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ Pr√©-requisitos OK${NC}"
echo ""

# Verificar se est√° logado no Vercel
echo "üîê Verificando login no Vercel..."
if ! vercel whoami >/dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  N√£o est√° logado no Vercel. Fazendo login...${NC}"
    vercel login
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Erro no login do Vercel${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ Login OK${NC}"
echo ""

# Verificar se o banco de dados existe
echo "üóÑÔ∏è  Verificando banco de dados..."
if [ ! -f "database.sqlite" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Banco de dados n√£o encontrado. Construindo...${NC}"
    npm run build
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Erro ao construir banco de dados${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ Banco de dados OK${NC}"
echo ""

# Testar API localmente
echo "üß™ Testando API localmente..."
npm start &
SERVER_PID=$!
sleep 5

# Teste b√°sico
if curl -s http://localhost:3000/api/health >/dev/null; then
    echo -e "${GREEN}‚úÖ API funcionando localmente${NC}"
else
    echo -e "${RED}‚ùå API n√£o est√° funcionando localmente${NC}"
    kill $SERVER_PID 2>/dev/null
    exit 1
fi

# Parar servidor local
kill $SERVER_PID 2>/dev/null
echo ""

# Configurar vari√°veis de ambiente
echo "‚öôÔ∏è  Configurando vari√°veis de ambiente..."

# Perguntar sobre dom√≠nios permitidos
echo -e "${BLUE}Digite os dom√≠nios permitidos para CORS (separados por v√≠rgula):${NC}"
echo "Exemplo: https://meusite.com,https://app.meusite.com"
read -p "Dom√≠nios: " ALLOWED_ORIGINS

if [ -z "$ALLOWED_ORIGINS" ]; then
    ALLOWED_ORIGINS="https://meusite.com,https://app.meusite.com"
    echo -e "${YELLOW}‚ö†Ô∏è  Usando dom√≠nios padr√£o: $ALLOWED_ORIGINS${NC}"
fi

# Configurar vari√°veis no Vercel
echo "Configurando ALLOWED_ORIGINS..."
echo "$ALLOWED_ORIGINS" | vercel env add ALLOWED_ORIGINS

echo "Configurando NODE_ENV..."
echo "production" | vercel env add NODE_ENV

echo "Configurando PORT..."
echo "3000" | vercel env add PORT

echo -e "${GREEN}‚úÖ Vari√°veis configuradas${NC}"
echo ""

# Fazer deploy
echo "üöÄ Fazendo deploy..."
vercel --prod

if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}üéâ Deploy realizado com sucesso!${NC}"
    echo ""
    echo "üìã Pr√≥ximos passos:"
    echo "1. Teste sua API: https://sua-api.vercel.app/api/health"
    echo "2. Teste CORS com seus dom√≠nios"
    echo "3. Configure dom√≠nio personalizado (opcional)"
    echo ""
    echo "üîó URLs √∫teis:"
    echo "- API: https://sua-api.vercel.app"
    echo "- Documenta√ß√£o: https://sua-api.vercel.app/"
    echo "- Health Check: https://sua-api.vercel.app/api/health"
    echo ""
    echo "üìö Documenta√ß√£o completa: VERCEL-DEPLOY.md"
else
    echo -e "${RED}‚ùå Erro no deploy${NC}"
    exit 1
fi
